data = {
    (33, 355): 'пробел',
    (33, 396): '!',
    (34, 74): '"',
    (34, 677): '#',
    (36, 87): '$',
    (36, 664): '%',
    (39, 171): '&',
    (39, 580): "'",
    (43, 224): '(',
    (43, 527): ')',
    (44, 366): '*',
    (44, 385): '+',
    (45, 31): ',',
    (45, 720): '-',
    (47, 349): '.',
    (47, 402): '/',
    (48, 49): '0',
    (48, 702): '1',
    (49, 183): '2',
    (49, 568): '3',
    (53, 277): '4',
    (53, 474): '5',
    (56, 332): '6',
    (56, 419): '7',
    (58, 139): '8',
    (58, 612): '9',
    (59, 365): ':',
    (59, 386): ';',
    (61, 129): '<',
    (61, 622): '=',
    (62, 372): '>',
    (62, 379): '?',
    (66, 199): '@',
    (66, 552): 'A',
    (67, 84): 'B',
    (67, 667): 'C',
    (69, 241): 'D',
    (69, 510): 'E',
    (70, 195): 'F',
    (70, 556): 'G',
    (72, 254): 'H',
    (72, 497): 'I',
    (73, 72): 'J',
    (73, 679): 'K',
    (74, 170): 'L',
    (74, 581): 'M',
    (75, 318): 'N',
    (75, 433): 'O',
    (78, 271): 'P',
    (78, 480): 'Q',
    (79, 111): 'R',
    (79, 640): 'S',
    (80, 318): 'T',
    (80, 433): 'U',
    (82, 270): 'V',
    (82, 481): 'W',
    (83, 373): 'X',
    (83, 378): 'Y',
    (85, 35): 'Z',
    (85, 716): '[',
    (86, 25): '\\',
    (86, 726): ']',
    (90, 21): '^',
    (90, 730): '_',
    (93, 267): '`',
    (93, 484): 'a',
    (98, 338): 'b',
    (98, 413): 'c',
    (99, 295): 'd',
    (99, 456): 'e',
    (100, 364): 'f',
    (100, 387): 'g',
    (102, 267): 'h',
    (102, 484): 'i',
    (105, 369): 'j',
    (105, 382): 'k',
    (106, 24): 'l',
    (106, 727): 'm',
    (108, 247): 'n',
    (108, 504): 'o',
    (109, 200): 'p',
    (109, 551): 'q',
    (110, 129): 'r',
    (110, 622): 's',
    (114, 144): 't',
    (114, 607): 'u',
    (115, 242): 'v',
    (115, 509): 'w',
    (116, 92): 'x',
    (116, 659): 'y',
    (120, 147): 'z',
    (120, 604): '{',
    (125, 292): '|',
    (125, 459): '}',
    (126, 33): '~',
    (189, 297): 'А',
    (189, 454): 'Б',
    (192, 32): 'В',
    (192, 719): 'Г',
    (194, 205): 'Д',
    (194, 546): 'Е',
    (197, 145): 'Ж',
    (197, 606): 'З',
    (198, 224): 'И',
    (198, 527): 'Й',
    (200, 30): 'К',
    (200, 721): 'Л',
    (203, 324): 'М',
    (203, 427): 'Н',
    (205, 372): 'О',
    (205, 379): 'П',
    (206, 106): 'Р',
    (206, 645): 'С',
    (209, 82): 'Т',
    (209, 669): 'У',
    (210, 31): 'Ф',
    (210, 720): 'Х',
    (215, 247): 'Ц',
    (215, 504): 'Ч',
    (218, 150): 'Ш',
    (218, 601): 'Щ',
    (221, 138): 'Ъ',
    (221, 613): 'Ы',
    (226, 9): 'Ь',
    (226, 742): 'Э',
    (227, 299): 'Ю',
    (227, 452): 'Я',
    (228, 271): 'а',
    (228, 480): 'б',
    (229, 151): 'в',
    (229, 600): 'г',
    (234, 164): 'д',
    (234, 587): 'е',
    (235, 19): 'ж',
    (235, 732): 'з',
    (236, 39): 'и',
    (236, 712): 'й',
    (237, 297): 'к',
    (237, 454): 'л',
    (238, 175): 'м',
    (238, 576): 'н',
    (240, 309): 'о',
    (240, 442): 'п',
    (243, 87): 'р',
    (243, 664): 'с',
    (247, 266): 'т',
    (247, 485): 'у',
    (249, 183): 'ф',
    (249, 568): 'х',
    (250, 14): 'ц',
    (250, 737): 'ч',
    (251, 245): 'ш',
    (251, 506): 'щ',
    (253, 211): 'ъ',
    (253, 540): 'ы',
    (256, 121): 'ь',
    (256, 630): 'э',
    (257, 293): 'ю',
    (257, 458): 'я'
}


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def neg(self):
        return Point(self.x, -self.y)


class EllipticCurve:
    def __init__(self, a, b, prime):
        self.a = a
        self.b = b
        self.prime = prime

    def subtract(self, p1, p2):
        return self.add(p1, p2.neg())

    def add(self, p1, p2):
        if p1 is None:
            return p2
        if p2 is None:
            return p1

        if p1.x == p2.x and p1.y != p2.y or p1.x != p2.x and p1.y == p2.y:
            return None

        if p1.x == p2.x and p1.y == p2.y:
            m = (3 * p1.x**2 + self.a) * pow(2 * p1.y, -1, self.prime)
        else:
            m = (p2.y - p1.y) * pow(p2.x - p1.x, -1, self.prime)

        m %= self.prime

        x = m**2 - p1.x - p2.x
        y = m * (p1.x - x) - p1.y

        return Point(x % self.prime, y % self.prime)

    def multiply(self, p, n):
        result = None
        addend = p

        while n:
            if n & 1:
                result = self.add(result, addend)

            addend = self.add(addend, addend)
            n >>= 1

        return result

    def decrpypt(self, p1, p2, n):
        q = self.multiply(p1, n)
        res = self.subtract(p2, q)
        return res

pairs = [
    [(188, 93), (295, 219)],
    [(618, 206), (646, 706)],
    [(440, 539), (573, 583)],
    [(16, 416), (694, 581)],
    [(179, 275), (585, 540)],
    [(377, 456), (701, 570)],
    [(618, 206), (67, 667)],
    [(286, 136), (36, 664)],
    [(72, 254), (727, 65)],
    [(568, 355), (438, 40)]
]

def main():
    ec = EllipticCurve(-1, 1, 751)
    
    print("Here is decrypted string:")
    for pair in pairs:
        p1 = Point(pair[0][0], pair[0][1])
        p2 = Point(pair[1][0], pair[1][1])
        res = ec.decrpypt(p1, p2, 54)
        print(data[(res.x, res.y)], end="")

if __name__ == "__main__":
    main()
